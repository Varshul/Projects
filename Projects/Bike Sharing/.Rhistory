sd(s)
sd(a)
fit <- lm(y ~ x)
summary(fit)$sigma
fit <- lm(y ~ x)
summary(fit)$sd
fit <- lm(y ~ x)
(fit)$sigma
fit <- lm(y ~ x)
summary(fit)$sigma
fit <- lm(y ~ x)
sqrt(summary(fit)$sigma)
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
n <- length(y)
fit <- lm(y~x)
summary(fit)$sigma
sqrt(sum(resid(fit)^2) / (n - 2))
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
##same as
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
##
# Input tweets for the 4 teams with an additinal tag of FIFA
library(twitteR)
library(ROAuth)
library(ggplot2)
ARG.list <- searchTwitter('#ARG #FIFA', n=1000, cainfo="cacert.pem")
ARG.df = twListToDF(ARG.list)
BRA.list <- searchTwitter('#BRA #FIFA', n=1000, cainfo="cacert.pem")
BRA.df = twListToDF(BRA.list)
head(BRA.list)
GER.list <- searchTwitter('#GER #FIFA', n=1000, cainfo="cacert.pem")
GER.df = twListToDF(GER.list)
NED.list <- searchTwitter('#NED #FIFA', n=1000, cainfo="cacert.pem")
NED.df = twListToDF(NED.list)
# Import all other libraries
library (plyr)
library (stringr)
#Generate the function
score.sentiment = function(sentences, pos.words, neg.words,.progress='none')
{
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array ("a") of scores back, so we use
# "l" + "a" + "ply" = "laply":
good.smiley <- c(":)")
bad.smiley <- c(":(",";)",":'",":P")
scores = laply(sentences, function(sentence, pos.words, neg.words) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub(":)", 'awsum', sentence)
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\\d+', '', sentence)
# and convert to lower case:
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
#Load sentiment word lists
hu.liu.pos = scan('C:/temp/positive-words.txt', what='character', comment.char=';')
hu.liu.neg = scan('C:/temp/negative-words.txt', what='character', comment.char=';')
#Add words to list
pos.words = c(hu.liu.pos, 'upgrade', 'awsum')
neg.words = c(hu.liu.neg, 'wtf', 'wait','waiting', 'epicfail', 'mechanical',"suspension","no")
team = c("vs.","vs","versus")
#convert text to factor
ARG.df$text<-as.factor(ARG.df$text)
BRA.df$text<-as.factor(BRA.df$text)
NED.df$text<-as.factor(NED.df$text)
GER.df$text<-as.factor(GER.df$text)
#calculate all the scores
ARG.scores = score.sentiment(ARG.df$text, pos.words,neg.words, .progress='text')
BRA.scores = score.sentiment(BRA.df$text, pos.words,neg.words, .progress='text')
NED.scores = score.sentiment(NED.df$text,pos.words,neg.words, .progress='text')
GER.scores = score.sentiment(GER.df$text,pos.words,neg.words, .progress='text')
ARG.scores$Team = 'Argentina'
BRA.scores$Team = 'Brazil'
NED.scores$Team = 'Netherland'
GER.scores$Team = 'Germany'
#Check the negative tweets. What made them negative
ARG.scores.2 = subset(ARG.scores,ARG.scores$score < 0)
head(ARG.scores.2)
# Final outputs
hist(ARG.scores$score)
hist(BRA.scores$score)
hist(NED.scores$score)
hist(GER.scores$score)
table(ARG.scores$score)
table(BRA.scores$score)
table(NED.scores$score)
table(GER.scores$score)
head(all.scores)
all.scores = rbind(ARG.scores, NED.scores, GER.scores,BRA.scores)
table(all.scores$score,all.scores$Team)
ggplot(data=all.scores) + # ggplot works on data.frames, always
geom_bar(mapping=aes(x=score, fill=Team), binwidth=1) +
facet_grid(Team~.) + # make a separate plot for each hashtag
theme_bw() + scale_fill_brewer() # plain display, nicer colors
install.packages("twitter")
install.packages("twitteR")
install.packages("ROAuth")
# Input tweets for the 4 teams with an additinal tag of FIFA
library(twitteR)
library(ROAuth)
library(ggplot2)
ARG.list <- searchTwitter('#ARG #FIFA', n=1000, cainfo="cacert.pem")
ARG.df = twListToDF(ARG.list)
BRA.list <- searchTwitter('#BRA #FIFA', n=1000, cainfo="cacert.pem")
BRA.df = twListToDF(BRA.list)
head(BRA.list)
GER.list <- searchTwitter('#GER #FIFA', n=1000, cainfo="cacert.pem")
GER.df = twListToDF(GER.list)
NED.list <- searchTwitter('#NED #FIFA', n=1000, cainfo="cacert.pem")
NED.df = twListToDF(NED.list)
# Import all other libraries
library (plyr)
library (stringr)
#Generate the function
score.sentiment = function(sentences, pos.words, neg.words,.progress='none')
{
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array ("a") of scores back, so we use
# "l" + "a" + "ply" = "laply":
good.smiley <- c(":)")
bad.smiley <- c(":(",";)",":'",":P")
scores = laply(sentences, function(sentence, pos.words, neg.words) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub(":)", 'awsum', sentence)
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\\d+', '', sentence)
# and convert to lower case:
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
#Load sentiment word lists
hu.liu.pos = scan('C:/temp/positive-words.txt', what='character', comment.char=';')
hu.liu.neg = scan('C:/temp/negative-words.txt', what='character', comment.char=';')
#Add words to list
pos.words = c(hu.liu.pos, 'upgrade', 'awsum')
neg.words = c(hu.liu.neg, 'wtf', 'wait','waiting', 'epicfail', 'mechanical',"suspension","no")
team = c("vs.","vs","versus")
#convert text to factor
ARG.df$text<-as.factor(ARG.df$text)
BRA.df$text<-as.factor(BRA.df$text)
NED.df$text<-as.factor(NED.df$text)
GER.df$text<-as.factor(GER.df$text)
#calculate all the scores
ARG.scores = score.sentiment(ARG.df$text, pos.words,neg.words, .progress='text')
BRA.scores = score.sentiment(BRA.df$text, pos.words,neg.words, .progress='text')
NED.scores = score.sentiment(NED.df$text,pos.words,neg.words, .progress='text')
GER.scores = score.sentiment(GER.df$text,pos.words,neg.words, .progress='text')
ARG.scores$Team = 'Argentina'
BRA.scores$Team = 'Brazil'
NED.scores$Team = 'Netherland'
GER.scores$Team = 'Germany'
#Check the negative tweets. What made them negative
ARG.scores.2 = subset(ARG.scores,ARG.scores$score < 0)
head(ARG.scores.2)
# Final outputs
hist(ARG.scores$score)
hist(BRA.scores$score)
hist(NED.scores$score)
hist(GER.scores$score)
table(ARG.scores$score)
table(BRA.scores$score)
table(NED.scores$score)
table(GER.scores$score)
head(all.scores)
all.scores = rbind(ARG.scores, NED.scores, GER.scores,BRA.scores)
table(all.scores$score,all.scores$Team)
ggplot(data=all.scores) + # ggplot works on data.frames, always
geom_bar(mapping=aes(x=score, fill=Team), binwidth=1) +
facet_grid(Team~.) + # make a separate plot for each hashtag
theme_bw() + scale_fill_brewer() # plain display, nicer colors
library(twitteR)
library(ROAuth)
library(ggplot2)
getTwitterOAuth("ps2GjSRrE7B1QxSM6HSbYq1UP", "kQIHBEb2ut6XPXTvvnHwJ9h1BaSVRxBWqKj6kXlzEGVKv9s4Ry")
getTwitterOAuth("ps2GjSRrE7B1QxSM6HSbYq1UP", "kQIHBEb2ut6XPXTvvnHwJ9h1BaSVRxBWqKj6kXlzEGVKv9s4Ry")
?getTwitterOAuth
getTwitterOAuth(ps2GjSRrE7B1QxSM6HSbYq1UP, kQIHBEb2ut6XPXTvvnHwJ9h1BaSVRxBWqKj6kXlzEGVKv9s4Ry)
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "ps2GjSRrE7B1QxSM6HSbYq1UP"
consumerSecret <- "kQIHBEb2ut6XPXTvvnHwJ9h1BaSVRxBWqKj6kXlzEGVKv9s4Ry"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
registerTwitterOAuth(twitCred)
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "ps2GjSRrE7B1QxSM6HSbYq1UP"
consumerSecret <- "kQIHBEb2ut6XPXTvvnHwJ9h1BaSVRxBWqKj6kXlzEGVKv9s4Ry"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
?twitCred
twitCred
twitCred$handshake()
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "ps2GjSRrE7B1QxSM6HSbYq1UP"
consumerSecret <- "kQIHBEb2ut6XPXTvvnHwJ9h1BaSVRxBWqKj6kXlzEGVKv9s4Ry"
twitCred$handshake()
twitCred$handshake()
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "ps2GjSRrE7B1QxSM6HSbYq1UP"
consumerSecret <- "kQIHBEb2ut6XPXTvvnHwJ9h1BaSVRxBWqKj6kXlzEGVKv9s4Ry"
twitCred$handshake()
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "ps2GjSRrE7B1QxSM6HSbYq1UP"
consumerSecret <- "kQIHBEb2ut6XPXTvvnHwJ9h1BaSVRxBWqKj6kXlzEGVKv9s4Ry"
twitCred$handshake()
library(RCurl)
# Set SSL certs globally
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
twitCred$handshake()
twitCred$handshake()
registerTwitterOAuth(twitCred)
twitCred$handshake()
Q
twitCred$handshake()
reqURL <- "https://api.twitter.com/1.1/"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "ps2GjSRrE7B1QxSM6HSbYq1UP"
consumerSecret <- "kQIHBEb2ut6XPXTvvnHwJ9h1BaSVRxBWqKj6kXlzEGVKv9s4Ry"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
registerTwitterOAuth(twitCred)
twitCred$handshake()
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "ps2GjSRrE7B1QxSM6HSbYq1UP"
consumerSecret <- "kQIHBEb2ut6XPXTvvnHwJ9h1BaSVRxBWqKj6kXlzEGVKv9s4Ry"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "E89vXwkpB4MvW0FFr3O6wMGxr"
consumerSecret <- "kvPM5KJadM7jMAi7EFjJXep9UaQoHcyq8tPag1ktruAcWEzhuX"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "http://api.twitter.com/oauth/access_token"
authURL <- "http://api.twitter.com/oauth/authorize"
consumerKey <- "E89vXwkpB4MvW0FFr3O6wMGxr"
consumerSecret <- "kvPM5KJadM7jMAi7EFjJXep9UaQoHcyq8tPag1ktruAcWEzhuX"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
registerTwitterOAuth(2747517)
registerTwitterOAuth("2747517")
twitCred$handshake()
registerTwitterOAuth(trwitCred)
twitCred$handshake()
registerTwitterOAuth(trwitCred)
registerTwitterOAuth(twitCred)
rm(list=ls())
library(twitteR)
library(ROAuth)
requestURL <-  "https://api.twitter.com/oauth/request_token"
accessURL =    "https://api.twitter.com/oauth/access_token"
authURL =      "https://api.twitter.com/oauth/authorize"
consumerKey =   "ps2GjSRrE7B1QxSM6HSbYq1UP"
consumerSecret = "kQIHBEb2ut6XPXTvvnHwJ9h1BaSVRxBWqKj6kXlzEGVKv9s4Ry"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
twitCred$handshake(cainfo="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
twitCred$handshake(cainfo="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
KEY <- "ps2GjSRrE7B1QxSM6HSbYq1UP"
SECRET <-"kQIHBEb2ut6XPXTvvnHwJ9h1BaSVRxBWqKj6kXlzEGVKv9s4Ry"
## create an object that will save the authenticated onbject -- we can for later sessions
## will need to navigate to website and type in data to generate the file
## NOTE:  Only need to do this part once!!!
cred <- OAuthFactory$new(consumerKey = KEY,
consumerSecret = SECRET,
requestURL = "https://api.twitter.com/oauth/request_token",
accessURL = "https://api.twitter.com/oauth/access_token",
authURL = "https://api.twitter.com/oauth/authorize")
cred$handshake(cainfo="cacert.pem")
cred$handshake(cainfo="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
KEY <- "ps2GjSRrE7B1QxSM6HSbYq1UP"
SECRET <-"kQIHBEb2ut6XPXTvvnHwJ9h1BaSVRxBWqKj6kXlzEGVKv9s4Ry"
## create an object that will save the authenticated onbject -- we can for later sessions
## will need to navigate to website and type in data to generate the file
## NOTE:  Only need to do this part once!!!
cred <- OAuthFactory$new(consumerKey = KEY,
consumerSecret = SECRET,
requestURL = "https://api.twitter.com/oauth/request_token",
accessURL = "https://api.twitter.com/oauth/access_token",
authURL = "https://api.twitter.com/oauth/authorize")
cred$handshake(cainfo="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",
>              destfile="cacert.perm")
> twitCred$handshake(cainfo="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",
>              destfile="cacert.perm")
twitCred$handshake(cainfo="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",
>              destfile="cacert.perm")
twitCred$handshake(cainfo="cacert.perm")
library(devtools)
install_github("twitteR", username="geoffjentry")
library(twitteR)
api_key = "E89vXwkpB4MvW0FFr3O6wMGxr"
api_secret = "kvPM5KJadM7jMAi7EFjJXep9UaQoHcyq8tPag1ktruAcWEzhuX"
access_token = "24521872-ohMx6NMgeBJgVR2V1qLo9ckqwu9HqAQG26wfebUJN"
access_token_secret = "wZsZoxIjbBATDfUUcAw4htgICrbExb52h3JwgtvDA7509"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
library(devtools)library(twitteR)
api_key = "E89vXwkpB4MvW0FFr3O6wMGxr"
api_secret = "kvPM5KJadM7jMAi7EFjJXep9UaQoHcyq8tPag1ktruAcWEzhuX"
access_token = "24521872-ohMx6NMgeBJgVR2V1qLo9ckqwu9HqAQG26wfebUJN"
access_token_secret = "wZsZoxIjbBATDfUUcAw4htgICrbExb52h3JwgtvDA7509"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
library(devtools)
library(twitteR)
api_key = "E89vXwkpB4MvW0FFr3O6wMGxr"
api_secret = "kvPM5KJadM7jMAi7EFjJXep9UaQoHcyq8tPag1ktruAcWEzhuX"
access_token = "24521872-ohMx6NMgeBJgVR2V1qLo9ckqwu9HqAQG26wfebUJN"
access_token_secret = "wZsZoxIjbBATDfUUcAw4htgICrbExb52h3JwgtvDA7509"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
twitCred$handshake()
install.packages(c("devtools", "rjson", "bit64", "httr"))
#RESTART R session!
library(devtools)
install_github("twitteR", username="geoffjentry")
library(twitteR)
install.packages(c("devtools", "rjson", "bit64", "httr"))
library(devtools)
install_github("twitteR", username="geoffjentry")
library(twitteR)
library(devtools)
library(twitteR)
api_key = "E89vXwkpB4MvW0FFr3O6wMGxr"
api_secret = "kvPM5KJadM7jMAi7EFjJXep9UaQoHcyq8tPag1ktruAcWEzhuX"
access_token = "24521872-ohMx6NMgeBJgVR2V1qLo9ckqwu9HqAQG26wfebUJN"
access_token_secret = "wZsZoxIjbBATDfUUcAw4htgICrbExb52h3JwgtvDA7509"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
searchTwitter("iphone")
ARG.list <- searchTwitter('#ARG #FIFA', n=1000, cainfo="cacert.pem")
?searchTwitter
ARG.list <- searchTwitter('#ARG #FIFA', n=1000, cainfo="cacert.pem")
ARG.df = twListToDF(ARG.list)
ARG.list <- searchTwitter('#ARG #FIFA', n=1000)
ARG.df = twListToDF(ARG.list)
ARG.df
ARG.list <- searchTwitter('#ARG #FIFA', n=1000)
ARG.df = twListToDF(ARG.list)
ARG.list
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem")
requestURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "E89vXwkpB4MvW0FFr3O6wMGxr"
consumerSecret <- "kvPM5KJadM7jMAi7EFjJXep9UaQoHcyq8tPag1ktruAcWEzhuX"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
library(twitteR)
> library(ROAuth)
> library(RCurl)
library(twitteR)
library(ROAuth)
library(RCurl)
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake(cainfo="cacert.pem")
registerTwitterOAuth(twitCred)
registerTwitterOAuth(twitCred)
library(devtools)
library(twitteR)
api_key = "E89vXwkpB4MvW0FFr3O6wMGxr"
api_secret = "kvPM5KJadM7jMAi7EFjJXep9UaQoHcyq8tPag1ktruAcWEzhuX"
access_token = "24521872-ohMx6NMgeBJgVR2V1qLo9ckqwu9HqAQG26wfebUJN"
access_token_secret = "wZsZoxIjbBATDfUUcAw4htgICrbExb52h3JwgtvDA7509"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
save(list="twitCred", file="twitteR_credentials")
library (twitteR)
load("twitteR_credentials")
registerTwitterOAuth(twitCred)
?setup_twitter_oauth
setup_twitter_oauth("E89vXwkpB4MvW0FFr3O6wMGxr", "kvPM5KJadM7jMAi7EFjJXep9UaQoHcyq8tPag1ktruAcWEzhuX")
s <- searchTwitter('#United', cainfo="cacert.pem")
library(devtools)
library(twitteR)
api_key = "E89vXwkpB4MvW0FFr3O6wMGxr"
api_secret = "kvPM5KJadM7jMAi7EFjJXep9UaQoHcyq8tPag1ktruAcWEzhuX"
access_token = "24521872-ohMx6NMgeBJgVR2V1qLo9ckqwu9HqAQG26wfebUJN"
access_token_secret = "wZsZoxIjbBATDfUUcAw4htgICrbExb52h3JwgtvDA7509"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
?fit
library(rpart)
?fit
??fit
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
?fit
?rpart
head(test)
setwd("F:/varshul/R/Projects/Bike Sharing")
test <- read.csv("F:/varshul/R/Projects/Bike Sharing/test.csv")
View(test)
train <- read.csv("F:/varshul/R/Projects/Bike Sharing/train.csv")
View(train)
fit <- rpart(casual ~ season, data=train)
fancyRpartPlot(fit)
str(train)
train$season <- as.actor(train$season)
train$season <- as.factor(train$season)
fit <- rpart(casual ~ season, data=train)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$season, casual = Prediction)
write.csv(submit, file = "Submission.csv", row.names = FALSE)
test$season <- as.factor(test$season)
Prediction <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$season, casual = Prediction)
write.csv(submit, file = "Submission.csv", row.names = FALSE)
