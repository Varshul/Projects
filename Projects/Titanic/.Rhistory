ARG.df$text<-as.factor(ARG.df$text)
BRA.df$text<-as.factor(BRA.df$text)
NED.df$text<-as.factor(NED.df$text)
GER.df$text<-as.factor(GER.df$text)
#calculate all the scores
ARG.scores = score.sentiment(ARG.df$text, pos.words,neg.words, .progress='text')
BRA.scores = score.sentiment(BRA.df$text, pos.words,neg.words, .progress='text')
NED.scores = score.sentiment(NED.df$text,pos.words,neg.words, .progress='text')
GER.scores = score.sentiment(GER.df$text,pos.words,neg.words, .progress='text')
ARG.scores$Team = 'Argentina'
BRA.scores$Team = 'Brazil'
NED.scores$Team = 'Netherland'
GER.scores$Team = 'Germany'
#Check the negative tweets. What made them negative
ARG.scores.2 = subset(ARG.scores,ARG.scores$score < 0)
head(ARG.scores.2)
# Final outputs
hist(ARG.scores$score)
hist(BRA.scores$score)
hist(NED.scores$score)
hist(GER.scores$score)
table(ARG.scores$score)
table(BRA.scores$score)
table(NED.scores$score)
table(GER.scores$score)
head(all.scores)
all.scores = rbind(ARG.scores, NED.scores, GER.scores,BRA.scores)
table(all.scores$score,all.scores$Team)
ggplot(data=all.scores) + # ggplot works on data.frames, always
geom_bar(mapping=aes(x=score, fill=Team), binwidth=1) +
facet_grid(Team~.) + # make a separate plot for each hashtag
theme_bw() + scale_fill_brewer() # plain display, nicer colors
install.packages("twitter")
install.packages("twitteR")
install.packages("ROAuth")
# Input tweets for the 4 teams with an additinal tag of FIFA
library(twitteR)
library(ROAuth)
library(ggplot2)
ARG.list <- searchTwitter('#ARG #FIFA', n=1000, cainfo="cacert.pem")
ARG.df = twListToDF(ARG.list)
BRA.list <- searchTwitter('#BRA #FIFA', n=1000, cainfo="cacert.pem")
BRA.df = twListToDF(BRA.list)
head(BRA.list)
GER.list <- searchTwitter('#GER #FIFA', n=1000, cainfo="cacert.pem")
GER.df = twListToDF(GER.list)
NED.list <- searchTwitter('#NED #FIFA', n=1000, cainfo="cacert.pem")
NED.df = twListToDF(NED.list)
# Import all other libraries
library (plyr)
library (stringr)
#Generate the function
score.sentiment = function(sentences, pos.words, neg.words,.progress='none')
{
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list
# or a vector as an "l" for us
# we want a simple array ("a") of scores back, so we use
# "l" + "a" + "ply" = "laply":
good.smiley <- c(":)")
bad.smiley <- c(":(",";)",":'",":P")
scores = laply(sentences, function(sentence, pos.words, neg.words) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub(":)", 'awsum', sentence)
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\\d+', '', sentence)
# and convert to lower case:
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
#Load sentiment word lists
hu.liu.pos = scan('C:/temp/positive-words.txt', what='character', comment.char=';')
hu.liu.neg = scan('C:/temp/negative-words.txt', what='character', comment.char=';')
#Add words to list
pos.words = c(hu.liu.pos, 'upgrade', 'awsum')
neg.words = c(hu.liu.neg, 'wtf', 'wait','waiting', 'epicfail', 'mechanical',"suspension","no")
team = c("vs.","vs","versus")
#convert text to factor
ARG.df$text<-as.factor(ARG.df$text)
BRA.df$text<-as.factor(BRA.df$text)
NED.df$text<-as.factor(NED.df$text)
GER.df$text<-as.factor(GER.df$text)
#calculate all the scores
ARG.scores = score.sentiment(ARG.df$text, pos.words,neg.words, .progress='text')
BRA.scores = score.sentiment(BRA.df$text, pos.words,neg.words, .progress='text')
NED.scores = score.sentiment(NED.df$text,pos.words,neg.words, .progress='text')
GER.scores = score.sentiment(GER.df$text,pos.words,neg.words, .progress='text')
ARG.scores$Team = 'Argentina'
BRA.scores$Team = 'Brazil'
NED.scores$Team = 'Netherland'
GER.scores$Team = 'Germany'
#Check the negative tweets. What made them negative
ARG.scores.2 = subset(ARG.scores,ARG.scores$score < 0)
head(ARG.scores.2)
# Final outputs
hist(ARG.scores$score)
hist(BRA.scores$score)
hist(NED.scores$score)
hist(GER.scores$score)
table(ARG.scores$score)
table(BRA.scores$score)
table(NED.scores$score)
table(GER.scores$score)
head(all.scores)
all.scores = rbind(ARG.scores, NED.scores, GER.scores,BRA.scores)
table(all.scores$score,all.scores$Team)
ggplot(data=all.scores) + # ggplot works on data.frames, always
geom_bar(mapping=aes(x=score, fill=Team), binwidth=1) +
facet_grid(Team~.) + # make a separate plot for each hashtag
theme_bw() + scale_fill_brewer() # plain display, nicer colors
getwd()
setwd("F:Varshul/R/Projects/Titanic")
getwd()
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
test$Survived <- NA
c <- rbind(train,test)
c$FamilySize <- c$SibSp + c$Parch + 1
c$Name <- as.character(c$Name)
c$Title <- sapply(c$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
c$Title <- sub(' ', '', c$Title)
c$Title[c$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
c$Title[c$Title %in% c('Capt', 'Don', 'Major', 'Sir', 'Jonkheer')] <- 'Sir'
c$Title[c$Title %in% c('Dona', 'Lady', 'the Countess')] <- 'Lady'
c$Title <- factor(c$Title)
test <- read.csv("F:/varshul/R/Projects/Titanic/test.csv")
View(test)
train <- read.csv("F:/varshul/R/Projects/Titanic/train.csv")
View(train)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
test$Survived <- NA
c <- rbind(train,test)
c$FamilySize <- c$SibSp + c$Parch + 1
c$Name <- as.character(c$Name)
c$Title <- sapply(c$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
c$Title <- sub(' ', '', c$Title)
c$Title[c$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
c$Title[c$Title %in% c('Capt', 'Don', 'Major', 'Sir', 'Jonkheer')] <- 'Sir'
c$Title[c$Title %in% c('Dona', 'Lady', 'the Countess')] <- 'Lady'
c$Title <- factor(c$Title)
Agefit <- rpart(Age ~ Pclass + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data= c[!is.na(c$Age),], method="anova")
c$Age[is.na(c$Age)] <- predict(Agefit, c[is.na(c$Age),])
summary(c$Age)
summary(c$Embarked)
which(c$Embarked == '')
c$Embarked[c(62,830)] = "S"
c$Embarked <- factor(c$Embarked)
c$Fare[1044] <- median(c$Fare, na.rm=TRUE)
c$Surname <- sapply(c$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
c$FamilyID <- paste(as.character(c$FamilySize), c$Surname, sep="")
c$FamilyID[c$FamilySize <= 2] <- 'Small'
famIDs <- data.frame(table(c$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2,]
c$FamilyID[c$FamilyID %in% famIDs$Var1] <- 'Small'
c$FamilyID <- factor(c$FamilyID)
c$FamilyID2 <- c$FamilyID
c$FamilyID2 <- as.character(c$FamilyID2)
c$FamilyID2[c$FamilySize <= 3] <- 'Small'
c$FamilyID2 <- factor(c$FamilyID2)
library(randomForest)
c$F <- substr(c$Ticket,start=1,stop=1)
str(c$f)
str(c$F)
c$F <- substr(c$Cabin,start=1,stop=1)
str(c$F)
c$F(wherec$F=="") <- NA
c$F(where(c$F=="")) <- NA
c$F(which(c$F=="")) <- NA
c$F[which(c$F=="")] <- NA
str(c$F)
prop.table(table(train$Survived, train$Cabin),2)
prop.table(table(c$Survived, c$Cabin),2)
train <- c[1:891,]
test <- c[892:1309,]
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + F + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize +
FamilyID2, data=train, importance=TRUE, ntree=2000)
varImpPlot(fit)
fit <- randomForest(as.factor(Survived) ~ Pclass  + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize +
FamilyID2, data=train, importance=TRUE, ntree=2000)
varImpPlot(fit)
names(train)
fit <- randomForest(as.factor(Survived) ~ Pclass + F + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize +
FamilyID2, data=train, importance=TRUE, ntree=2000)
str(c$F)
summary(c$F)
table(c$F)
prop.table(table(c$Survived, c$F),2)
c$F
fit <- rpart(Survived ~ Pclass + Sex + F + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
plot(fit)
text(fit)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = "class")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "Submission5.csv", row.names = FALSE)
Submission2 <- read.csv("F:/varshul/R/Projects/Titanic/Submission2.csv")
View(Submission2)
Submission3 <- read.csv("F:/varshul/R/Projects/Titanic/Submission3.csv")
View(Submission3)
Submission4 <- read.csv("F:/varshul/R/Projects/Titanic/Submission4.csv")
View(Submission4)
Submission5 <- read.csv("F:/varshul/R/Projects/Titanic/Submission5.csv")
View(Submission5)
table(Submission2$Survived)
table(Submission3$Survived)
table(Submission4$Survived)
table(Submission5$Survived)
c$F
table(c$F)
is.na(c$F)
count(is.na(c$F))
count(!is.na(c$F))
!is.na(c$F)
table(c$F)
str(c$F)
summary(c$F)
summary(as.factor(c$F))
Agefit <- rpart(F ~ Pclass + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data= c[!is.na(c$F),], method="anova")
c$F[is.na(c$F)] <- predict(Agefit, c[is.na(c$F),])
summary(as.factor(c$F))
Agefit <- rpart(F ~ Pclass + SibSp + Parch + Fare + Embarked + Title + FamilySize,
data= c[!is.na(c$F),])
c$F[is.na(c$F)] <- predict(Agefit, c[is.na(c$F),])
summary(as.factor(c$F))
fit <- rpart(Survived ~ Pclass + Sex + F + Age + SibSp + Parch + Fare + Embarked, data=train, method="class")
train <- c[1:891,]
test <- c[892:1309,]
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + F + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data = train, controls=cforest_unbiased(ntree=2000, mtry=3))
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "Submission5.csv", row.names = FALSE)
library(party)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + F + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data = train, controls=cforest_unbiased(ntree=2000, mtry=3))
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "Submission5.csv", row.names = FALSE)
names(train)
c$F <- as.factor(c$F)
train <- c[1:891,]
test <- c[892:1309,]
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + F + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data = train, controls=cforest_unbiased(ntree=2000, mtry=3))
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "Submission5.csv", row.names = FALSE)
Submission5 <- read.csv("F:/varshul/R/Projects/Titanic/Submission5.csv")
View(Submission5)
table(Submission4$Survived)
table(Submission3$Survived)
table(Submission2$Survived)
table(Submission$Survived)
table(Submission5$Survived)
varImpPlot(fit)
qplot(Fare,data=train,facets=.~Survived)
library(ggplot2)
qplot(Fare,data=train,facets=.~Survived)
hist(train$Fare)
qplot(Fare,data=train,facets=.~Survived)
qplot(Fare,data=train,facets=.~Survived,binwidth=2)
getwd()
testdat <- data.frame(x = 1:100, y = rnorm(100))
testdat[50,2] <- 100 ## Outlier!
plot(testdat$x, testdat$y, type = "l", ylim = c(-3,3))
##axis limit dif between the 2 system of plots
g <- ggplot(testdat, aes(x = x, y = y))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g <- ggplot(train, aes(Fare, Survived))
p <- g + geom_point()
print(p)
g <- ggplot(maacs, aes(logpm25, NocturnalSympt))
p <- g + geom_point()
print(p)
g + geom_point()
g + geom_point() + facet_grid(. ~ bmicat) + geom_smooth(method = "lm")
g + geom_point(aes(color = bmicat),size = 4, alpha = 1/2)
##changinf font and theme
g + geom_point(aes(color = bmicat)) + theme_bw(base_family = "Times")
boxplot(Fare~Survived, data=train, col="red")
library(airquality)
load(airquality)
data(airquality)
with(airquality, plot(Wind,Ozone, main = "Ozone and Wind in New York City",pch=20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd=2)
with(train, plot(Fare,Survived, main = "Ozone and Wind in New York City",pch=20))
model <- lm(Fare ~ Survived, train)
abline(model, lwd=2)
with(train, plot(Fare,Survived, main = "Ozone and Wind in New York City",pch=20))
model <- lm(Survived ~ Fare, train)
abline(model, lwd=2)
cor(train$Fare,train$Survived)
?cforest
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data = train, controls=cforest_unbiased(ntree=2000, mtry=3))
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "Submission4.csv", row.names = FALSE)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
data = train, controls=cforest_unbiased(ntree=4000, mtry=4))
Prediction <- predict(fit, test, OOB=TRUE, type = "response")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = "Submission5.csv", row.names = FALSE)
Submission5 <- read.csv("F:/varshul/R/Projects/Titanic/Submission5.csv")
View(Submission5)
table(Submission2$Survived)
table(Submission3$Survived)
table(Submission4$Survived)
table(Submission5$Survived)
trainData <- read.csv("train.csv", header = TRUE, stringsAsFactors = FALSE)
testData <- read.csv("test.csv", header = TRUE, stringsAsFactors = FALSE)
trainData <- read.csv("train.csv", header = TRUE, stringsAsFactors = FALSE)
testData <- read.csv("test.csv", header = TRUE, stringsAsFactors = FALSE)
plot(density(trainData$Age, na.rm = TRUE))
plot(density(trainData$Fare, na.rm = TRUE))
counts <- table(trainData$Survived, trainData$Sex)
barplot(counts, xlab = "Gender", ylab = "Number of People", main = "survived and deceased between male and female")
counts[2] / (counts[1] + counts[2])
counts[4] / (counts[3] + counts[4])
Pclass_survival <- table(trainData$Survived, trainData$Pclass)
barplot(Pclass_survival, xlab = "Cabin Class", ylab = "Number of People",
main = "survived and deceased between male and female")
Pclass_survival[2] / (Pclass_survival[1] + Pclass_survival[2])
Pclass_survival[4] / (Pclass_survival[3] + Pclass_survival[4])
Pclass_survival[6] / (Pclass_survival[5] + Pclass_survival[6])
trainData <- trainData[-c(1,9:12)]
trainData$Sex <- gsub("female", 1, trainData$Sex)
trainData$Sex <- gsub("^male", 0, trainData$Sex)
master_vector <- grep("Master\\.",trainData$Name)
miss_vector <- grep("Miss\\.", trainData$Name)
mrs_vector <- grep("Mrs\\.", trainData$Name)
mr_vector <- grep("Mr\\.", trainData$Name)
dr_vector <- grep("Dr\\.", trainData$Name)
for(i in master_vector) {
trainData$Name[i] <- "Master"
}
for(i in miss_vector) {
trainData$Name[i] <- "Miss"
}
for(i in mrs_vector) {
trainData$Name[i] <- "Mrs"
}
for(i in mr_vector) {
trainData$Name[i] <- "Mr"
}
for(i in dr_vector) {
trainData$Name[i] <- "Dr"
}
master_age <- round(mean(trainData$Age[trainData$Name == "Master"], na.rm = TRUE), digits = 2)
miss_age <- round(mean(trainData$Age[trainData$Name == "Miss"], na.rm = TRUE), digits =2)
mrs_age <- round(mean(trainData$Age[trainData$Name == "Mrs"], na.rm = TRUE), digits = 2)
mr_age <- round(mean(trainData$Age[trainData$Name == "Mr"], na.rm = TRUE), digits = 2)
dr_age <- round(mean(trainData$Age[trainData$Name == "Dr"], na.rm = TRUE), digits = 2)
# Adding age values for missing values
for (i in 1:nrow(trainData)) {
if (is.na(trainData[i,5])) {
if (trainData$Name[i] == "Master") {
trainData$Age[i] <- master_age
} else if (trainData$Name[i] == "Miss") {
trainData$Age[i] <- miss_age
} else if (trainData$Name[i] == "Mrs") {
trainData$Age[i] <- mrs_age
} else if (trainData$Name[i] == "Mr") {
trainData$Age[i] <- mr_age
} else if (trainData$Name[i] == "Dr") {
trainData$Age[i] <- dr_age
} else {
print("Uncaught Surname")
}
}
}
trainData["Child"] <- NA
for (i in 1:nrow(trainData)) {
if (trainData$Age[i] <= 12) {
trainData$Child[i] <- 1
} else {
trainData$Child[i] <- 2
}
}
trainData["Family"] <- NA
for(i in 1:nrow(trainData)) {
x <- trainData$SibSp[i]
y <- trainData$Parch[i]
trainData$Family[i] <- x + y + 1
}
trainData["Mother"] <- NA
for(i in 1:nrow(trainData)) {
if(trainData$Name[i] == "Mrs" & trainData$Parch[i] > 0) {
trainData$Mother[i] <- 1
} else {
trainData$Mother[i] <- 2
}
}
PassengerId = testData[1]
testData <- testData[-c(1, 8:11)]
testData$Sex <- gsub("female", 1, testData$Sex)
testData$Sex <- gsub("^male", 0, testData$Sex)
test_master_vector <- grep("Master\\.",testData$Name)
test_miss_vector <- grep("Miss\\.", testData$Name)
test_mrs_vector <- grep("Mrs\\.", testData$Name)
test_mr_vector <- grep("Mr\\.", testData$Name)
test_dr_vector <- grep("Dr\\.", testData$Name)
for(i in test_master_vector) {
testData[i, 2] <- "Master"
}
for(i in test_miss_vector) {
testData[i, 2] <- "Miss"
}
for(i in test_mrs_vector) {
testData[i, 2] <- "Mrs"
}
for(i in test_mr_vector) {
testData[i, 2] <- "Mr"
}
for(i in test_dr_vector) {
testData[i, 2] <- "Dr"
}
test_master_age <- round(mean(testData$Age[testData$Name == "Master"], na.rm = TRUE), digits = 2)
test_miss_age <- round(mean(testData$Age[testData$Name == "Miss"], na.rm = TRUE), digits =2)
test_mrs_age <- round(mean(testData$Age[testData$Name == "Mrs"], na.rm = TRUE), digits = 2)
test_mr_age <- round(mean(testData$Age[testData$Name == "Mr"], na.rm = TRUE), digits = 2)
test_dr_age <- round(mean(testData$Age[testData$Name == "Dr"], na.rm = TRUE), digits = 2)
for (i in 1:nrow(testData)) {
if (is.na(testData[i,4])) {
if (testData[i, 2] == "Master") {
testData[i, 4] <- test_master_age
} else if (testData[i, 2] == "Miss") {
testData[i, 4] <- test_miss_age
} else if (testData[i, 2] == "Mrs") {
testData[i, 4] <- test_mrs_age
} else if (testData[i, 2] == "Mr") {
testData[i, 4] <- test_mr_age
} else if (testData[i, 2] == "Dr") {
testData[i, 4] <- test_dr_age
} else {
print("Uncaught Surname")
}
}
}
testData[89, 4] <- test_miss_age
testData["Child"] <- NA
for (i in 1:nrow(testData)) {
if (testData[i, 4] <= 12) {
testData[i, 7] <- 1
} else {
testData[i, 7] <- 2
}
}
testData["Family"] <- NA
for(i in 1:nrow(testData)) {
testData[i, 8] <- testData[i, 5] + testData[i, 6] + 1
}
testData["Mother"] <- NA
for(i in 1:nrow(testData)) {
if(testData[i, 2] == "Mrs" & testData[i, 6] > 0) {
testData[i, 9] <- 1
} else {
testData[i, 9] <- 2
}
}
train.glm <- glm(Survived ~ Pclass + Sex + Age + Child + Sex*Pclass + Family + Mother, family = binomial, data = trainData)
summary(train.glm)
p.hats <- predict.glm(train.glm, newdata = testData, type = "response")
survival <- vector()
for(i in 1:length(p.hats)) {
if(p.hats[i] > .5) {
survival[i] <- 1
} else {
survival[i] <- 0
}
}
kaggle.sub <- cbind(PassengerId,survival)
colnames(kaggle.sub) <- c("PassengerId", "Survived")
write.csv(kaggle.sub, file = "kaggle.csv", row.names = FALSE)
kaggle <- read.csv("F:/varshul/R/Projects/Titanic/kaggle.csv")
View(kaggle)
table(kaggle$Survived)
Submission5 <- read.csv("F:/varshul/R/Projects/Titanic/Submission5.csv")
View(Submission5)
